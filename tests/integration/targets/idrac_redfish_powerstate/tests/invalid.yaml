# Dell OpenManage Ansible modules
# Copyright (C) 2024 Dell Inc. or its subsidiaries. All Rights Reserved.

# GNU General Public License v3.0+ (see COPYING or
# https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Test that we have an iDRAC host, iDRAC username and iDRAC password
  ansible.builtin.fail:
    msg: "Please define the following variables: idrac_ip, idrac_user and
      idrac_password."
  when: "idrac_ip is not defined or idrac_user is not defined or idrac_password
    is not defined"

- block:
    - name: Negative - unreachable host
      dellemc.openmanage.redfish_powerstate:
        baseuri: "999.999.999.999"
        reset_type: "On"
      ignore_unreachable: true
      register: invalid_unreachable_host

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - invalid_unreachable_host.unreachable
          - invalid_unreachable_host.msg == "<urlopen error [Errno -2] Name
            or service not known>"

    - name: Negative - invalid user
      dellemc.openmanage.redfish_powerstate:
        idrac_user: "invalid_user"
        reset_type: "On"
      ignore_errors: true
      register: invalid_user

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - invalid_user.failed
          - invalid_user.msg == ""HTTP Error 401: Unauthorized"

    - name: Negative - invalid password
      dellemc.openmanage.redfish_powerstate:
        idrac_password: "invalid_pass"
        reset_type: "On"
      ignore_errors: true
      register: invalid_password

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - invalid_password.failed
          - invalid_password.msg == ""HTTP Error 401: Unauthorized"

    - name: Negative - invalid ca_path
      dellemc.openmanage.redfish_powerstate:
        ca_path: "invalid"
        reset_type: "On"
      ignore_errors: true
      register: invalid_ca_path

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - invalid_ca_path.failed
          - invalid_ca_path.msg == ""HTTP Error 401: Unauthorized"

    - name: Negative - invalid resource id
      dellemc.openmanage.redfish_powerstate:
        reset_type: "On"
        resource_id: "invalid"
      ignore_errors: true
      register: invalid_resrouce_id

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - invalid_resrouce_id.skipped
          - invalid_resrouce_id.msg == "Invalid device Id 'invalid'
            is provided"

    - name: Negative - non applicable reset type
      dellemc.openmanage.redfish_powerstate:
        reset_type: "ForceOn"
      ignore_errors: true
      register: invalid_reset_type

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - invalid_reset_type.failed
          - invalid_reset_type.msg == "The target device does not support a
            force on operation.The acceptable values for device reset types
            are On, ForceOff, ForceRestart, GracefulRestart, GracefulShutdown,
            PushPowerButton, Nmi, PowerCycle."

    - name: Fetch the iDRAC firmware version
      ansible.builtin.include_tasks: _fetch_uri.yml
      vars:
        uri: "/redfish/v1/Managers/iDRAC.Embedded.1?$select=FirmwareVersion"

    - name: Set fact for firmware version
      ansible.builtin.set_fact:
        firmware_ver: "{{ idrac_output.json.FirmwareVersion }}"

    - name: Negative - reset_type and oem_reset_type is mutually exclusive
      dellemc.openmanage.redfish_powerstate:
        reset_type: "On"
        oem_reset_type:
          dell:
            final_power_state: "On"
            reset_type: "PowerCycle"
      ignore_errors: true
      register: mutually_exclusive_reset_type_oem_reset_type
      when: firmware_ver >= '7.00.60'

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - mutually_exclusive_reset_type_oem_reset_type.failed
          - "mutually_exclusive_reset_type_oem_reset_type.msg == 'parameters are
            mutually exclusive: oem_reset_type|reset_type'"
      when: firmware_ver >= '7.00.60'

    - name: Negative - Provide invalid Oem
      dellemc.openmanage.redfish_powerstate:
        oem_reset_type:
          xyz:
            final_power_state: "On"
            reset_type: "PowerCycle"
      ignore_errors: true
      register: invalid_oem
      when: firmware_ver >= '7.00.60'

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - invalid_oem.skipped
          - invalid_oem.msg == "The vendor is not supported. The supported
            vendors are 'Dell'. Enter the valid vendor and retry the operation."
      when: firmware_ver >= '7.00.60'

    - name: Negative - Provide wrong options to valid Oem
      dellemc.openmanage.redfish_powerstate:
        oem_reset_type:
          dell:
            final_power_state: "On"
            xyz: "PowerCycle"
      ignore_errors: true
      register: invalid_oem_options
      when: firmware_ver >= '7.00.60'

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - invalid_oem_options.skipped
          - invalid_oem_options.msg == "No reset type is specified for the
            target device. Enter the valid value and retry the operation."
      when: firmware_ver >= '7.00.60'

    - name: Fetching supported values for reset_type
      ansible.builtin.include_tasks: _fetch_uri.yml
      vars:
        uri: "/redfish/v1/Chassis/System.Embedded.1/?$select=Actions"
      when: firmware_ver >= '7.00.60'

    - name: Set fact for powercycle
      ansible.builtin.set_fact:
        reset__type:
          "{{ idrac_output.json.Actions.Oem['#DellOemChassis.ExtendedReset']
          ['ResetType@Redfish.AllowableValues'] | join(',') }}"
      when: firmware_ver >= '7.00.60'

    - name: Negative - Provide wrong values to valid Oem and options
      dellemc.openmanage.redfish_powerstate:
        oem_reset_type:
          dell:
            reset_type: "xyz"
            final_power_state: "Random"
      ignore_errors: true
      register: invalid_oem_and_options
      when: firmware_ver >= '7.00.60'

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - invalid_oem_and_options.failed
          - error_msg == invalid_oem_and_options.msg
      vars:
        error_msg: "'xyz' is not supported. The supported values are
          {{ reset__type }}. Enter the valid values and retry the operation."
      when: firmware_ver >= '7.00.60'

    - name: Fetch the iDRAC firmware version
      ansible.builtin.include_tasks: _fetch_uri.yml
      vars:
        uri: "/redfish/v1/Managers/iDRAC.Embedded.1?$select=FirmwareVersion"

    - name: Negative - Try oem_reset_type on unsupported iDRAC firmware version
      dellemc.openmanage.redfish_powerstate:
        oem_reset_type:
          dell:
            reset_type: "On"
            final_power_state: "PowerCycle"
      ignore_errors: true
      register: unsupported_fw
      when: firmware_ver < '7.00.60'

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - unsupported_fw.skipped
          - error_msg == unsupported_fw.msg
      vars:
        error_msg: "Unable to perform the Virtual AC power-cycle operation
          because the firmware version is not supported. The minimum supported
          firmware version is '7.00.60'."
      when: firmware_ver < '7.00.60'

    - name: Making sure server is powered On
      dellemc.openmanage.redfish_powerstate:
        reset_type: "On"

    - name: Negative - Performing oem_reset_type when server is powered On
      dellemc.openmanage.redfish_powerstate:
        oem_reset_type:
          dell:
            reset_type: "PowerCycle"
            final_power_state: "Off"
      ignore_errors: true
      register: powering_off_when_on
      when: firmware_ver >= '7.00.60'

    - name: Verify status of tasks
      ansible.builtin.assert:
        that:
          - powering_off_when_on.skipped
          - error_msg == powering_off_when_on.msg
      vars:
        error_msg: "Unable to perform the Virtual AC power-cycle operation
          because the server is powered on."
      when: firmware_ver >= '7.00.60'

  module_defaults:
    dellemc.openmanage.redfish_powerstate:
      baseuri: "{{ idrac_ip }}:{{ idrac_port }}"
      username: "{{ idrac_user }}"
      password: "{{ idrac_password }}"
      validate_certs: "{{ validate_certs }}"
