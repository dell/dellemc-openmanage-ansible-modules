# Dell OpenManage Ansible modules
# Copyright (C) 2024 Dell Inc. or its subsidiaries. All Rights Reserved.

# GNU General Public License v3.0+ (see COPYING or
# https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Test that we have an iDRAC host, iDRAC username and iDRAC password
  ansible.builtin.fail:
    msg: 'Please define the following variables: idrac_ip, idrac_user and
     idrac_password.'
  when: 'idrac_ip is not defined or idrac_user is not defined or idrac_password
   is not defined'

- name: Check whether idrac IP is IPv4 or IPv6.
  ansible.builtin.set_fact:
    is_ipv4: "{{ idrac_ip is ansible.utils.ipv4 }}"
    is_ipv6: "{{ idrac_ip is ansible.utils.ipv6 }}"

- ansible.builtin.set_fact:
    powerstate_uri: "{{ powerstate_uri if is_ipv4 else powerstate_uri_ipv6 }}"

- ansible.builtin.include_tasks: _get_firmware_inventory.yml

- ansible.builtin.include_tasks: _prereq_helper.yml
  vars:
    comp: 'BIOS'
  when: '"BIOS" not in rollback_component_list'

- block:

    - ansible.builtin.include_tasks: _get_firmware_inventory.yml
      vars:
        component: 'BIOS'

    - ansible.builtin.set_fact:
        rollback_to_version: "{{ previous_version }}"

    - name: Rollback an BIOS component firmware with reboot as false
       (Check mode - changes expected)
      redfish_firmware_rollback: &redfish_firmware_rollback_1
        name: BIOS
        reboot: false
        timeout: 300
      register: result
      check_mode: true

    - name: Verify task status - Rollback an BIOS component firmware with
       reboot as false (Check mode - changes expected)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.msg == "Changes found to be applied."

    - name: Rollback an BIOS component firmware with reboot as false
       (Normal mode)
      dellemc.openmanage.redfish_firmware_rollback:
        <<: *redfish_firmware_rollback_1
      register: result

    - ansible.builtin.set_fact:
        uri_job_status: []

    - ansible.builtin.include_tasks: _get_job_details.yml
      vars:
        job_id: "{{ result.job_status[0].Id }}"

    - ansible.builtin.set_fact:
        module_job_status: "{{ result.job_status }}"

    - ansible.builtin.include_tasks: _assert_job_status.yml

    - name: Verify task status - Rollback an BIOS component firmware
       with reboot as false (Normal mode)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.msg == "Successfully scheduled the job for firmware
           rollback."

    - name: Perform graceful restart of the device
      dellemc.openmanage.redfish_powerstate:
        reset_type: "ForceRestart"
      register: reboot_result

    - name: Wait for the device power state to be On
      ansible.builtin.uri:
        url: "{{ powerstate_uri }}"
        user: "{{ idrac_user }}"
        password: "{{ idrac_password }}"
        validate_certs: false
        headers: 'Accept=application/json'
      register: current_powerstate
      until: current_powerstate.json.PowerState == "On"
      retries: 20
      delay: 30

    - ansible.builtin.include_tasks: _post_update_helper.yml
      vars:
        job_id: "{{ result.job_status[0].Id }}"

    - ansible.builtin.include_tasks: _get_firmware_inventory.yml
      vars:
        component: 'BIOS'

    - name: Verify firmware version of BIOS component post rollback with
       reboot as false (Normal mode)
      ansible.builtin.assert:
        that:
          - installed_version == rollback_to_version

    - ansible.builtin.set_fact:
        rollback_to_version: "{{ previous_version }}"

    - name: Rollback an BIOS component firmware with reboot as false
       (Check mode again - changes expected)
      dellemc.openmanage.redfish_firmware_rollback:
        <<: *redfish_firmware_rollback_1
      register: result
      check_mode: true

    - name: Verify task status - Rollback an BIOS component firmware with
       reboot as false (Check mode again - changes expected)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.msg == "Changes found to be applied."

    - ansible.builtin.wait_for: timeout=30

    - name: Rollback an BIOS component firmware with reboot as false
       (Idempotence mode - changes expected)
      dellemc.openmanage.redfish_firmware_rollback:
        <<: *redfish_firmware_rollback_1
      register: result

    - ansible.builtin.set_fact:
        uri_job_status: []

    - ansible.builtin.include_tasks: _get_job_details.yml
      vars:
        job_id: "{{ result.job_status[0].Id }}"

    - ansible.builtin.set_fact:
        module_job_status: "{{ result.job_status }}"

    - ansible.builtin.include_tasks: _assert_job_status.yml

    - name: Verify task status - Rollback an BIOS component firmware with
       reboot as false (Idempotence mode - changes expected)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.msg == "Successfully scheduled the job for firmware
           rollback."

    - name: Perform graceful restart of the device
      redfish_powerstate:
        reset_type: "ForceRestart"
      register: reboot_result

    - name: Wait for the device power state to be On
      ansible.builtin.uri:
        url: "{{ powerstate_uri }}"
        user: "{{ idrac_user }}"
        password: "{{ idrac_password }}"
        validate_certs: false
        headers: 'Accept=application/json'
      register: current_powerstate
      until: current_powerstate.json.PowerState == "On"
      retries: 20
      delay: 30

    - ansible.builtin.include_tasks: _post_update_helper.yml
      vars:
        job_id: "{{ result.job_status[0].Id }}"

    - ansible.builtin.include_tasks: _get_firmware_inventory.yml
      vars:
        component: 'BIOS'

    - name: Verify firmware version of BIOS component post rollback with
       reboot as false (Idempotence mode - changes expected)
      ansible.builtin.assert:
        that:
          - installed_version == rollback_to_version

    - ansible.builtin.set_fact:
        rollback_to_version: "{{ previous_version }}"

    - name: Rollback an BIOS component firmware with reboot as true and
       non-default reboot_timeout (Check mode - changes expected)
      redfish_firmware_rollback: &redfish_firmware_rollback_2
        name: BIOS
        reboot: true
        reboot_timeout: 3600
        timeout: 300
      register: result
      check_mode: true

    - name: Verify task status - Rollback an BIOS component firmware with
       reboot as true and non-default reboot_timeout
       (Check mode - changes expected)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.msg == "Changes found to be applied."

    - ansible.builtin.wait_for: timeout=30

    - name: Rollback an BIOS component firmware with reboot as true
       and non-default reboot_timeout (Normal mode)
      redfish_firmware_rollback:
        <<: *redfish_firmware_rollback_2
      register: result

    - ansible.builtin.set_fact:
        uri_job_status: []

    - ansible.builtin.include_tasks: _get_job_details.yml
      vars:
        job_id: "{{ result.job_status[0].Id }}"

    - ansible.builtin.include_tasks: _get_firmware_inventory.yml
      vars:
        component: 'BIOS'

    - ansible.builtin.set_fact:
        module_job_status: "{{ result.job_status }}"

    - ansible.builtin.include_tasks: _assert_job_status.yml

    - name: Verify task status - Rollback an BIOS component firmware with
       reboot as true and non-default reboot_timeout (Normal mode)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.msg == "Successfully completed the job for firmware
           rollback."
          - installed_version == rollback_to_version

    - name: Rollback an BIOS component firmware with reboot as true and
       non-default reboot_timeout (Check mode again - changes expected)
      dellemc.openmanage.redfish_firmware_rollback:
        <<: *redfish_firmware_rollback_2
      register: result
      check_mode: true

    - name: Verify task status - Rollback an BIOS component firmware with
       reboot as true and non-default reboot_timeout
       (Check mode again - changes expected)
      ansible.builtin.assert:
        that:
          - result.changed
          - result.msg == "Changes found to be applied."

  module_defaults:
    dellemc.openmanage.redfish_firmware_rollback:
      baseuri: "{{ idrac_ip }}"
      username: "{{ idrac_user }}"
      password: "{{ idrac_password }}"
      validate_certs: "{{ validate_certs }}"

    dellemc.openmanage.redfish_powerstate:
      baseuri: "{{ idrac_ip }}"
      username: "{{ idrac_user }}"
      password: "{{ idrac_password }}"
      validate_certs: "{{ validate_certs }}"
