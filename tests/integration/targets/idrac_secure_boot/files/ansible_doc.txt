- '  This module allows you to perform the following operations.`'
- '  Import or Export Secure Boot certificate.'
- '  Enable or disable Secure Boot mode.'
- '  Configure Platform Key (PK) and Key Exchange Key (KEK) policies'
- '  Configure Allow Database (DB) and Disallow Database (DBX)'
- '  certificates.'
- '  Reset UEFI Secure Boot keys.'
- ''
- "\e[1mOPTIONS\e[0m (red indicates it is required):"
- ''
- "   \e[0;33mKEK\e[0m     A list of absolute paths of the Key Exchange Key (KEK)"
- '           certificate file for UEFI secure boot.'
- '           Directory path with write permissions if'
- "           \e[4mexport_certificates\e[0m is \e[1;30m`true'\e[0m."
- '        default: null'
- '        elements: path'
- '        type: list'
- ''
- "   \e[0;33mboot_mode\e[0m  Boot mode of the iDRAC."
- "              \e[1;30m`Uefi'\e[0m enables the secure boot in UEFI mode."
- "              \e[1;30m`Bios'\e[0m enables the secure boot in BIOS mode."
- '        choices: [Uefi, Bios]'
- '        default: null'
- '        type: str'
- ''
- "   \e[0;33mca_path\e[0m  The Privacy Enhanced Mail (PEM) file that contains a CA
    certificate"
- '            to be used for the validation.'
- '        default: null'
- '        type: path'
- ''
- "   \e[0;33mdatabase\e[0m  A list of absolute paths of the Allowe Database(DB) certificate
    file"
- '             for UEFI secure boot.'
- '             Directory path with write permissions if'
- "             \e[4mexport_certificates\e[0m is \e[1;30m`true'\e[0m."
- '        default: null'
- '        elements: path'
- '        type: list'
- ''
- "   \e[0;33mdisallow_database\e[0m  A list of absolute paths of the Disallow Database(DBX)
    certificate"
- '                      file for UEFI secure boot.'
- '                      Directory path with write permissions if'
- "                      \e[4mexport_certificates\e[0m is"
- "                      \e[1;30m`true'\e[0m."
- '        default: null'
- '        elements: path'
- '        type: list'
- ''
- "   \e[0;33mexport_certificates\e[0m  Export all the available certificates in the
    specified directory for"
- '                        the given keys.'
- "                        \e[4mexport_cetificates\e[0m is mutually"
- "                        exclusive with \e[4mimport\e[0m."
- "                        \e[4mexport_cetificates\e[0m is"
- "                        \e[1;30m`true'\e[0m either of"
- "                        \e[4mplatform_key\e[0m or i(key_exchange_key) or"
- "                        \e[4mdatabase\e[0m - or"
- "                        \e[4mdisallow_database\e[0m is required."
- '        default: null'
- '        type: bool'
- ''
- "   \e[0;33mforce_int_10\e[0m  Determines if the system BIOS will load the legacy
    video (INT 10h)"
- '                 option ROM from the video controller.'
- '                 This parameter is supported only in UEFI boot mode.'
- '                 If UEFI Secure Boot mode is enabled, you cannot'
- '                 enable this parameter.'
- "                 \e[1;30m`Disabled'\e[0m if the operating system"
- '                 supports UEFI video output standards.'
- "                 \e[1;30m`Enabled'\e[0m if the operating system does not"
- '                 support UEFI video output standards.'
- '        choices: [Disabled, Enabled]'
- '        default: null'
- '        type: str'
- ''
- "   \e[0;31m\e[1midrac_ip\e[0m\e[0m  iDRAC IP Address."
- '        type: str'
- ''
- "   \e[0;33midrac_password\e[0m  iDRAC user password."
- '                   If the password is not provided, then the'
- '                   environment variable `IDRAC_PASSWORD'' is used.'
- '                   Example: export IDRAC_PASSWORD=password'
- '        aliases: [idrac_pwd]'
- '        default: null'
- '        type: str'
- ''
- "   \e[0;33midrac_port\e[0m  iDRAC port."
- '        default: 443'
- '        type: int'
- ''
- "   \e[0;33midrac_user\e[0m  iDRAC username."
- '               If the username is not provided, then the environment'
- '               variable `IDRAC_USERNAME'' is used.'
- '               Example: export IDRAC_USERNAME=username'
- '        default: null'
- '        type: str'
- ''
- "   \e[0;33mimport_certificates\e[0m  Import all the specified key certificates."
- "                        When \e[4mimport_certificates\e[0m is"
- "                        \e[1;30m`true'\e[0m, then either"
- "                        \e[4mplatform_key\e[0m, \e[4mKEK\e[0m,"
- "                        \e[4mdatabase\e[0m, or \e[4mdisallow_database\e[0m"
- '                        is required.'
- '        default: null'
- '        type: bool'
- ''
- "   \e[0;33mjob_wait\e[0m  Whether to wait till completion of the secure boot certificate"
- "             operation. This is applicable when \e[4mrestart\e[0m is"
- "             \e[1;30m`true'\e[0m."
- '        default: true'
- '        type: bool'
- ''
- "   \e[0;33mjob_wait_timeout\e[0m  The maximum wait time of \e[4mjob_wait\e[0m in
    seconds. The job is"
- '                     tracked only for this duration.'
- "                     This option is applicable when \e[4mjob_wait\e[0m"
- "                     is \e[1;30m`true'\e[0m."
- '        default: 1200'
- '        type: int'
- ''
- "   \e[0;33mplatform_key\e[0m  The absolute path of the Platform key certificate
    file for UEFI"
- '                 secure boot.'
- '                 Directory path with write permissions if'
- "                 \e[4mexport_certificates\e[0m is \e[1;30m`true'\e[0m."
- '        default: null'
- '        type: path'
- ''
- "   \e[0;33mreset_keys\e[0m  Resets the UEFI Secure Boot keys."
- "               \e[1;30m`DeleteAllKeys'\e[0m deletes the content of all"
- '               UEFI Secure Boot key databases (PK, KEK, DB, and DBX).'
- '               This choice configures the system in Setup Mode.'
- "               \e[1;30m`DeletePK'\e[0m deletes the content of the PK"
- '               UEFI Secure Boot database. This choice configures the'
- '               system in Setup Mode.'
- "               \e[1;30m`ResetAllKeysToDefault'\e[0m resets the content"
- '               of all UEFI Secure Boot key databases (PK, KEK, DB, and'
- '               DBX) to their default values.'
- "               \e[1;30m`ResetDB'\e[0m resets the content of the DB UEFI"
- '               Secure Boot database to its default values.'
- "               \e[1;30m`ResetDBX'\e[0m resets the content of the DBX"
- '               UEFI Secure Boot database to its default values.'
- "               \e[1;30m`ResetKEK'\e[0m resets the content of the KEK"
- '               UEFI Secure Boot database to its default values.'
- "               \e[1;30m`ResetPK'\e[0m resets the content of the PK UEFI"
- '               Secure Boot database to its default values.'
- '        choices: [DeleteAllKeys, DeletePK, ResetAllKeysToDefault, ResetDB, ResetDBX,
    ResetKEK, ResetPK]'
- '        default: null'
- '        type: str'
- ''
- "   \e[0;33mrestart\e[0m  Secure boot certificate import operation requires a server
    restart."
- '            This parameter provides an option to restart the server.'
- "            \e[1;30m`true'\e[0m restarts the server."
- "            \e[1;30m`false'\e[0m does not restart the server."
- "            \e[4mrestart\e[0m is applicable when"
- "            \e[4mimport_certificates\e[0m is \e[1;30m`true'\e[0m."
- "            \e[4mrestart\e[0m will be ignored only when"
- "            \e[4mexport_certificates\e[0m is \e[1;30m`true'\e[0m."
- '        default: false'
- '        type: bool'
- ''
- "   \e[0;33mrestart_type\e[0m  Restart type of the server."
- "                 \e[1;30m`ForceRestart'\e[0m forcefully restarts the"
- '                 server.'
- "                 \e[1;30m`GracefulRestart'\e[0m gracefully restarts the"
- '                 server.'
- "                 \e[4mrestart_type\e[0m is applicable when"
- "                 \e[4mrestart\e[0m is \e[1;30m`true'\e[0m."
- '        choices: [GracefulRestart, ForceRestart]'
- '        default: GracefulRestart'
- '        type: str'
- ''
- "   \e[0;33msecure_boot\e[0m  UEFI Secure Boot."
- "                The \e[4msecure_boot\e[0m can be \e[1;30m`Enabled'\e[0m"
- "                only if \e[4mboot_mode\e[0m is \e[1;30m`UEFI'\e[0m and"
- "                \e[4mforce_int_10\e[0m is \e[1;30m`Disabled'\e[0m."
- "                \e[1;30m`Disabled'\e[0m disables the secure boot mode."
- "                \e[1;30m`Enabled'\e[0m enables the secure boot mode."
- '        choices: [Disabled, Enabled]'
- '        default: null'
- '        type: str'
- ''
- "   \e[0;33msecure_boot_mode\e[0m  The UEFI Secure Boot mode configures how to use
    the Secure Boot"
- '                     Policy.'
- "                     \e[1;30m`AuditMode'\e[0m sets the Secure Boot mode"
- '                     to an Audit mode when Platform Key is not'
- '                     installed on the system. The BIOS does not'
- '                     authenticate updates to the policy objects and'
- '                     transition between modes. BIOS performs a'
- '                     signature verification on pre-boot images and'
- '                     logs the results in the Image Execution'
- '                     Information table, where it processes the images'
- '                     whether the status of verification is pass or'
- '                     fail.'
- "                     \e[1;30m`DeployedMode'\e[0m sets the Secure Boot"
- '                     mode to a Deployed mode when Platform Key is'
- '                     installed on the system, and then BIOS performs a'
- '                     signature verification to update the policy'
- '                     objects.'
- "                     \e[1;30m`UserMode'\e[0m sets the Secure Boot mode"
- '                     to a User mode when Platform Key is installed on'
- '                     the system, and then BIOS performs signature'
- '                     verification to update policy objects.'
- '        choices: [AuditMode, DeployedMode, UserMode]'
- '        default: null'
- '        type: str'
- ''
- "   \e[0;33msecure_boot_policy\e[0m  The following are the types of Secure Boot
    policy."
- "                       \e[1;30m`Custom'\e[0m inherits the standard"
- '                       certificates and image digests that are loaded'
- '                       in the system by default. You can modify the'
- '                       certificates and image digests.'
- "                       \e[1;30m`Standard'\e[0m indicates that the system"
- '                       has default certificates, image digests, or'
- '                       hash loaded from the factory.'
- '                       When Secure Boot Policy is configured as Custom'
- '                       you can perform the following operations as'
- '                       view, export, import, delete, delete all, and'
- '                       reset policies.'
- '        choices: [Custom, Standard]'
- '        default: null'
- '        type: str'
- ''
- "   \e[0;33mtimeout\e[0m  The socket level timeout in seconds."
- '        default: 30'
- '        type: int'
- ''
- "   \e[0;33mvalidate_certs\e[0m  If \e[1;30m`false'\e[0m, the SSL certificates will
    not be validated."
- "                   Configure \e[1;30m`false'\e[0m only on personally"
- '                   controlled sites where self-signed certificates are'
- '                   used.'
- "                   Prior to collection version \e[1;30m`5.0.0'\e[0m, the"
- "                   \e[4mvalidate_certs\e[0m is \e[1;30m`false'\e[0m by"
- '                   default.'
- '        default: true'
- '        type: bool'
- ''
- "   \e[0;33mx_auth_token\e[0m  Authentication token."
- '                 If the x_auth_token is not provided, then the'
- '                 environment variable `IDRAC_X_AUTH_TOKEN'' is used.'
- '                 Example: export IDRAC_X_AUTH_TOKEN=x_auth_token'
- '        default: null'
- '        type: str'
- ''
- "\e[1mATTRIBUTES:\e[0m"
- ''
- "        \e[4mcheck_mode:\e[0m"
- '        description: Runs task to validate without performing action on the target
    machine.'
- '        support: full'
- ''
- "        \e[4mdiff_mode:\e[0m"
- '        description: Runs the task to report the changes made or to be made.'
- '        support: none'
- ''
- "\e[1mNOTES:\e[0m"
- '      * This module will always report changes found to be'
- "        applied when run in \e[1;30m`check mode'\e[0m."
- '      * This module does not support idempotency when'
- "        \e[4mreset_type\e[0m or \e[4mexport_certificates\e[0m or"
- "        \e[4mimport_certificates\e[0m is provided."
- '      * The order of operations is as follows configure Secure'
- '        Boot settings(boot_mode, secure_boot, secure_boot_mode,'
- '        secure_boot_policy, force_int_10), export, certificate'
- '        reset, import, followed by idrac reset.'
- "      * \e[4mexport_certificate\e[0m will export all the"
- '        certificates of the key defined in the playbook.'
- "      * This module considers values of \e[4mrestart\e[0m,"
- "        \e[4mjob_wait\e[0m only for the last operation in the"
- '        sequence.'
- '      * This module supports IPv4 and IPv6 addresses.'
- ''
- "\e[1mREQUIREMENTS:\e[0m  python >= 3.9.6"
- ''
- ''
- "\e[1mAUTHOR\e[0m: Abhishek Sinha(@ABHISHEK-SINHA10), Lovepreet Singh (@singh-lovepreet1)"
- ''
- "\e[1mEXAMPLES:\e[0m"
- '---'
- '- name: Enable Secure Boot.'
- '  dellemc.openmanage.idrac_secure_boot:'
- '    idrac_ip: "192.168.1.2"'
- '    idrac_user: "user"'
- '    idrac_password: "password"'
- '    ca_path: "/path/to/ca_cert.pem"'
- '    secure_boot: "Enabled"'
- ''
- '- name: Set Secure Boot mode, Secure Boot policy, and restart iDRAC.'
- '  dellemc.openmanage.idrac_secure_boot:'
- '    idrac_ip: "192.168.1.2"'
- '    idrac_user: "user"'
- '    idrac_password: "password"'
- '    ca_path: "/path/to/ca_cert.pem"'
- '    secure_boot: "Enabled"'
- '    secure_boot_mode: "UserMode"'
- '    secure_boot_policy: "Custom"'
- '    restart: true'
- '    restart_type: "GracefulRestart"'
- ''
- '- name: Reset Secure Boot certificates.'
- '  dellemc.openmanage.idrac_secure_boot:'
- '    idrac_ip: "192.168.1.2"'
- '    idrac_user: "user"'
- '    idrac_password: "password"'
- '    ca_path: "/path/to/ca_cert.pem"'
- '    reset_keys: "ResetAllKeysToDefault"'
- ''
- '- name: Export multiple SecureBoot certificate.'
- '  dellemc.openmanage.idrac_secure_boot:'
- '    idrac_ip: "192.168.1.2"'
- '    idrac_user: "user"'
- '    idrac_password: "password"'
- '    ca_path: "/path/to/ca_cert.pem"'
- '    export_certificates: true'
- '    platform_key: /user/name/export_cert/pk'
- '    KEK:'
- '      - /user/name/export_cert/kek'
- '    database:'
- '      - /user/name/export_cert/db'
- '    disallow_database:'
- '      - /user/name/export_cert/dbx'
- ''
- '- name: Import multiple SecureBoot certificate without applying to iDRAC.'
- '  dellemc.openmanage.idrac_secure_boot:'
- '    idrac_ip: "192.168.1.2"'
- '    idrac_user: "user"'
- '    idrac_password: "password"'
- '    ca_path: "/path/to/ca_cert.pem"'
- '    import_certificates: true'
- '    platform_key: /user/name/certificates/pk.pem'
- '    KEK:'
- '      - /user/name/certificates/kek1.pem'
- '      - /user/name/certificates/kek2.pem'
- '    database:'
- '      - /user/name/certificates/db1.pem'
- '      - /user/name/certificates/db2.pem'
- '    disallow_database:'
- '      - /user/name/certificates/dbx1.pem'
- '      - /user/name/certificates/dbx2.pem'
- ''
- '- name: Import a SecureBoot certificate and restart the server to apply it.'
- '  dellemc.openmanage.idrac_secure_boot:'
- '    idrac_ip: "192.168.1.2"'
- '    idrac_user: "user"'
- '    idrac_password: "password"'
- '    ca_path: "/path/to/ca_cert.pem"'
- '    import_certificates: true'
- '    platform_key: /user/name/certificates/pk.pem'
- '    restart: true'
- '    job_wait_timeout: 600'
- ''
- "\e[1mRETURN VALUES:\e[0m"
- ''
- "   \e[0;33merror_info\e[0m  Details of the HTTP Error."
- '        returned: on HTTP error'
- '        sample:'
- '          error:'
- '            ''@Message.ExtendedInfo'':'
- '            - Message: Unable to process the request because an error occurred.'
- '              MessageArgs: []'
- '              MessageId: GEN1234'
- '              RelatedProperties: []'
- '              Resolution: Retry the operation. If the issue persists, contact your
    system'
- '                administrator.'
- '              Severity: Critical'
- '            code: Base.1.0.GeneralError'
- '            message: A general error has occurred. See ExtendedInfo for more information.'
- '        type: dict'
- ''
- "   \e[0;33mmsg\e[0m     Status of the secure boot operation."
- '        returned: always'
- '        sample: Successfully imported the SecureBoot certificate.'
- '        type: str'
