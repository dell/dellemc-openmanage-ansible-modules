---
- hosts: redfish_hosts
  connection: local
  gather_facts: false
  name: "Redfish Storage Volume - Ansible Module"
  vars:
    retries_count: 100
    polling_interval: 10
    reboot_uri: "/redfish/v1/Systems/System.Embedded.1/Actions/ComputerSystem.Reset"

  tasks:
    - name: Initialize an existing volume.
      dellemc.openmanage.redfish_storage_volume:
        baseuri: "{{ baseuri }}"
        username: "{{ username }}"
        password: "{{ password }}"
        ca_path: "/path/to/ca_cert.pem"
        command: "initialize"
        volume_id: "Disk.Virtual.1:RAID.Slot.1-1"
        initialize_type: "Slow"
      register: result
      tags:
        - initialize_volume

    - name: View the job details to track the status of the initialization task
      ansible.builtin.uri:
        url: "https://{{ baseuri }}{{ result.task.uri }}"
        user: "{{ username }}"
        password: "{{ password }}"
        method: "GET"
        use_proxy: true
        status_code: 200, 202
        return_content: true
        validate_certs: false
        force_basic_auth: true
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
      register: job_result
      failed_when: "'json' not in job_result"
      until: job_result.json.TaskState == 'Completed' or job_result.json.TaskState == 'Pending'
      retries: "{{ retries_count }}"
      delay: "{{ polling_interval }}"
      tags:
        - job-tracking

    - name: Reboot the system if the job status is pending.
      ansible.builtin.uri:
        url: "https://{{ baseuri }}{{ reboot_uri }}"
        user: "{{ username }}"
        password: "{{ password }}"
        method: "POST"
        body_format: raw
        body: '{"ResetType": "ForceRestart"}'
        use_proxy: true
        status_code: 204
        return_content: false
        validate_certs: false
        force_basic_auth: true
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
      register: reboot_result
      changed_when: reboot_result.status == 204
      when: job_result.json.TaskState == 'Pending' and job_result.json.Messages.0.Message == 'Task successfully scheduled.'

    - name: View the job details to verify if the task status is completed.
      ansible.builtin.uri:
        url: "https://{{ baseuri }}{{ result.task.uri }}"
        user: "{{ username }}"
        password: "{{ password }}"
        method: "GET"
        use_proxy: true
        status_code: 200, 202
        return_content: true
        validate_certs: false
        force_basic_auth: true
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
      register: final_result
      failed_when: final_result.json.TaskState == "Completed" and final_result.json.TaskStatus != "OK"
      until: final_result.json.TaskState == 'Completed'
      retries: "{{ retries_count }}"
      delay: "{{ polling_interval }}"
