name: CI

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  # Run CI against all pushes (direct commits, also merged PRs), Pull Requests
  workflow_dispatch:
  push:
  pull_request:
  # Runs CI on every day (at 06:00 UTC)
  schedule:
    - cron: '0 6 * * *'

jobs:
  build:
    name: Build collection
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ansible-version: [stable-2.17]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install ansible (${{ matrix.ansible-version }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible-version }}.tar.gz --disable-pip-version-check

      - name: Build a collection tarball
        run: ansible-galaxy collection build --output-path "${GITHUB_WORKSPACE}/.cache/collection-tarballs"

      - name: Store migrated collection artifacts
        uses: actions/upload-artifact@v4.4.0
        with:
          name: collection
          path: .cache/collection-tarballs

  ansible-lint:
    name: Ansible lint
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
        ansible-version: [stable-2.17]
        exclude:
          - ansible-version: devel
            python-version: '3.10'
    steps:
      # Important: This sets up your GITHUB_WORKSPACE environment variable
      - name: Checkout the source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # needed for progressive mode to work

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install ansible (${{ matrix.ansible-version }}) version
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible-version }}.tar.gz --disable-pip-version-check

      - name: Install ansible lint
        run: pip install ansible-lint pytest --disable-pip-version-check

      - name: Install ansible posix
        run: ansible-galaxy collection install ansible.posix

      - name: Download migrated collection artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: collection
          path: .cache/collection-tarballs

      - name: Install collection build
        run: ansible-galaxy collection install .cache/collection-tarballs/*.tar.gz

      - name: Run Ansible lint
        run: ansible-lint --show-relpath
        working-directory: /home/runner/work/dellemc-openmanage-ansible-modules/dellemc-openmanage-ansible-modules

  sanity:
    needs: [build]
    uses: ansible/ansible-content-actions/.github/workflows/sanity.yaml@main
  unit-galaxy:
    needs: [build]
    uses: ansible/ansible-content-actions/.github/workflows/unit.yaml@main
  all_green:
    if: ${{ always() }}
    needs:
      - sanity
      - unit-galaxy
      - ansible-lint
    runs-on: ubuntu-latest
    steps:
      - run: >-
          python -c "assert 'failure' not in
          set([
          '${{ needs.sanity.result }}',
          '${{ needs.unit-galaxy.result }}'
          '${{ needs.ansible-lint.result }}'
          ])"
