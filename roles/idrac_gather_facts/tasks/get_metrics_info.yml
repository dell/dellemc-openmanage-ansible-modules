---
- name: Get Power Supply information.
  ansible.builtin.uri:
    url: "https://{{ hostname }}:{{ https_port }}{{ api_chassis }}/PowerSubsystem/PowerSupplies?$expand=*($levels=1)"
  register: power_result
  ignore_errors: true
  delegate_to: "{{ idrac_gather_facts_delegate }}"

- name: Get Power Supply Metrics ids
  ansible.builtin.set_fact:
    power_metrics_ids: "{{ power_result.json.Members | selectattr('Metrics', 'defined') | map(attribute='Metrics') | flatten }}"
  when: power_result.status == 200

- name: Get Power Supply Metrics information.
  ansible.builtin.uri:
    url: "https://{{ hostname }}:{{ https_port }}{{ item['@odata.id'] }}"
    validate_certs: "{{ validate_certs }}"
    method: "{{ idrac_gather_facts_uri_method }}"
    user: "{{ username | default(lookup('env', 'IDRAC_USERNAME')) }}"
    password: "{{ password | default(lookup('env', 'IDRAC_PASSWORD')) }}"
    timeout: "{{ https_timeout }}"
    force_basic_auth: true
    headers: "{{ idrac_gather_facts_uri_headers }}"
    body_format: "{{ idrac_gather_facts_uri_body_format }}"
    status_code: "{{ idrac_gather_facts_uri_status_code }}"
    return_content: "{{ idrac_gather_facts_uri_return_content }}"
  loop: "{{ power_metrics_ids }}"
  when: power_result.status == 200
  register: power_metrics_result
  delegate_to: "{{ idrac_gather_facts_delegate }}"

- name: Get Thermal Metrics information.
  ansible.builtin.uri:
    url: "https://{{ hostname }}:{{ https_port }}{{ api_chassis }}/ThermalSubsystem/ThermalMetrics"
    validate_certs: "{{ validate_certs }}"
    method: "{{ idrac_gather_facts_uri_method }}"
    user: "{{ username | default(lookup('env', 'IDRAC_USERNAME')) }}"
    password: "{{ password | default(lookup('env', 'IDRAC_PASSWORD')) }}"
    timeout: "{{ https_timeout }}"
    force_basic_auth: true
    headers: "{{ idrac_gather_facts_uri_headers }}"
    body_format: "{{ idrac_gather_facts_uri_body_format }}"
    status_code: "{{ idrac_gather_facts_uri_status_code }}"
    return_content: "{{ idrac_gather_facts_uri_return_content }}"
  register: thermal_result
  delegate_to: "{{ idrac_gather_facts_delegate }}"

- name: Get Memory information.
  ansible.builtin.uri:
    url: "https://{{ hostname }}:{{ https_port }}{{ api_system }}/Memory?$expand=*($levels=1)"
    validate_certs: "{{ validate_certs }}"
    method: "{{ idrac_gather_facts_uri_method }}"
    user: "{{ username | default(lookup('env', 'IDRAC_USERNAME')) }}"
    password: "{{ password | default(lookup('env', 'IDRAC_PASSWORD')) }}"
    headers: "{{ idrac_gather_facts_uri_headers }}"
    timeout: "{{ https_timeout }}"
    force_basic_auth: true
    body_format: "{{ idrac_gather_facts_uri_body_format }}"
    status_code: "{{ idrac_gather_facts_uri_status_code }}"
    return_content: "{{ idrac_gather_facts_uri_return_content }}"
  register: memory_result
  delegate_to: "{{ idrac_gather_facts_delegate }}"

- name: Get Memory Metrics ids
  ansible.builtin.set_fact:
    memory_metrics_ids: "{{ memory_result.json.Members | selectattr('Metrics', 'defined') | map(attribute='Metrics') | flatten }}"
  when: memory_result.status == 200

- name: Get Memory Metrics information.
  ansible.builtin.uri:
    url: "https://{{ hostname }}:{{ https_port }}{{ item['@odata.id'] }}"
    validate_certs: "{{ validate_certs }}"
    ca_path: "{{ ca_path | default(omit) }}"
    method: "{{ idrac_gather_facts_uri_method }}"
    user: "{{ username | default(lookup('env', 'IDRAC_USERNAME')) }}"
    password: "{{ password | default(lookup('env', 'IDRAC_PASSWORD')) }}"
    timeout: "{{ https_timeout }}"
    force_basic_auth: true
    headers: "{{ idrac_gather_facts_uri_headers }}"
    body_format: "{{ idrac_gather_facts_uri_body_format }}"
    status_code: "{{ idrac_gather_facts_uri_status_code }}"
    return_content: "{{ idrac_gather_facts_uri_return_content }}"
  loop: "{{ memory_metrics_ids }}"
  when: memory_result.status == 200
  register: memory_metrics_result
  delegate_to: "{{ idrac_gather_facts_delegate }}"

- name: Set Power Supply facts
  ansible.builtin.set_fact:
    power_metrics:
      "{{ power_metrics_result.results | selectattr('json', 'defined') | map(attribute='json') | flatten |
      ansible.utils.remove_keys(target=['@odata.context', '@odata.type', '@odata.id', 'DataSourceUri']) }}"
  when: power_result.status == 200

- name: Set Thermal Metrics facts
  ansible.builtin.set_fact:
    thermal_metrics:
      "{{ thermal_result.json | ansible.utils.remove_keys(target=['@odata.context', '@odata.type', '@odata.id', 'DataSourceUri',
      'TemperatureReadingsCelsius@odata.count']) }}"
  when: thermal_result.status == 200

- name: Set Memory Metrics facts
  ansible.builtin.set_fact:
    memory_metrics:
      "{{ memory_metrics_result.results | selectattr('json', 'defined') | map(attribute='json') | flatten |
      ansible.utils.remove_keys(target=['@odata.context', '@odata.type', '@odata.id', 'DataSourceUri']) }}"
  when: memory_result.status == 200
