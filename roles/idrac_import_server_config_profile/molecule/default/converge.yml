---
- name: Converge
  hosts: all
  gather_facts: false
  tasks:
    - name: "Importing SCP without share_name"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        target: ['IDRAC']
        share_parameters:
          share_user: "{{ lookup('env', 'USERNAME') }}"
          share_password: "{{ lookup('env', 'PASSWORD') }}"
          scp_file: "{{ lookup('env', 'http_filename') }}"
      ignore_errors: true
      register: import_status

    - name: "Verifying Import SCP without share_name"
      ansible.builtin.assert:
        that:
          - idrac_import_server_config_profile_out.msg == "argument of type 'NoneType' is not iterable"

    - name: "Importing SCP without scp_file"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        target: ['IDRAC']
        share_parameters:
          share_name: "{{ lookup('env', 'HTTP_URL') }}"
          share_user: "{{ lookup('env', 'USERNAME') }}"
          share_password: "{{ lookup('env', 'PASSWORD') }}"
      ignore_errors: true
      register: import_status

    - name: "Verifying Import SCP without scp_file"
      ansible.builtin.assert:
        that:
          - "'HTTP Error 400' in '{{ idrac_import_server_config_profile_out.msg }}'"

    - name: "Importing SCP from CIFS with ALL components with invalid file"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        share_parameters:
          share_name: "{{ lookup('env', 'CIFS_URL') }}"
          share_user: "{{ lookup('env', 'CIFS_USERNAME') }}"
          share_password: "{{ lookup('env', 'CIFS_PASSWORD') }}"
          scp_file: "invalid_file.xml"
      ignore_errors: true
      register: import_status

    - name: "Verifying Import SCP from CIFS with ALL components with invalid file"
      ansible.builtin.assert:
        that:
          - idrac_import_server_config_profile_out.msg == "Failed to import scp."

    - name: Wait for 15 seconds
      ansible.builtin.pause:
        seconds: 15

    - name: "Importing SCP from CIFS with ALL components with invalid share"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        share_parameters:
          share_name: "192.168.0.1:/cifsshare"
          share_user: "{{ lookup('env', 'CIFS_USERNAME') }}"
          share_password: "{{ lookup('env', 'CIFS_PASSWORD') }}"
          scp_file: "{{ lookup('env', 'cifs_filename') }}"
      ignore_errors: true
      register: import_status

    - name: "Verifying Import SCP from CIFS with ALL components with invalid share"
      ansible.builtin.assert:
        that:
          - idrac_import_server_config_profile_out.msg == "Failed to import scp."

    - name: "Importing SCP with invalid hostname"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "randomHostname"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        share_parameters:
          share_name: "{{ lookup('env', 'CIFS_URL') }}"
          share_user: "{{ lookup('env', 'CIFS_USERNAME') }}"
          share_password: "{{ lookup('env', 'CIFS_PASSWORD') }}"
          scp_file: "{{ lookup('env', 'cifs_filename') }}"
      ignore_errors: true
      ignore_unreachable: true
      register: import_status

    - name: "Verifying Import SCP with invalid hostname"
      ansible.builtin.assert:
        that:
          - "'<urlopen error Unable to communicate with iDRAC randomHostname.' in '{{ idrac_import_server_config_profile_out.msg }}'"

    - name: "Importing SCP with invalid username"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "WrongUsername123"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        share_parameters:
          share_name: "{{ lookup('env', 'CIFS_URL') }}"
          share_user: "{{ lookup('env', 'CIFS_USERNAME') }}"
          share_password: "{{ lookup('env', 'CIFS_PASSWORD') }}"
          scp_file: "{{ lookup('env', 'cifs_filename') }}"
      ignore_errors: true
      ignore_unreachable: true
      register: import_status

    - name: "Verifying Import SCP with invalid username"
      ansible.builtin.assert:
        that:
          - "'HTTP Error 401' in '{{ idrac_import_server_config_profile_out.msg }}'"

    - name: "Importing SCP with invalid password"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "WrongPassword@123"
        validate_certs: false
        share_parameters:
          share_name: "{{ lookup('env', 'CIFS_URL') }}"
          share_user: "{{ lookup('env', 'CIFS_USERNAME') }}"
          share_password: "{{ lookup('env', 'CIFS_PASSWORD') }}"
          scp_file: "{{ lookup('env', 'cifs_filename') }}"
      ignore_errors: true
      ignore_unreachable: true
      register: import_status

    - name: "Verifying Import SCP with invalid password"
      ansible.builtin.assert:
        that:
          - "'HTTP Error 401' in '{{ idrac_import_server_config_profile_out.msg }}'"

    - name: "Importing SCP with invalid target"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        target: ['idrac']
        share_parameters:
          share_name: "{{ lookup('env', 'HTTP_URL') }}"
          share_user: "{{ lookup('env', 'HTTP_USERNAME') }}"
          share_password: "{{ lookup('env', 'HTTP_PASSWORD') }}"
          scp_file: "{{ lookup('env', 'http_filename') }}"
      ignore_errors: true
      register: import_status

    - name: "Verifying Import SCP with invalid target"
      ansible.builtin.assert:
        that:
          - "'value of scp_components must be one or more of: ALL, IDRAC, BIOS, NIC, RAID' in '{{ idrac_import_server_config_profile_out.msg }}'"

    - name: "Importing SCP with invalid username of share access"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        target: ['IDRAC']
        share_parameters:
          share_name: "{{ lookup('env', 'HTTP_URL') }}"
          share_user: "WrongUsername123"
          share_password: "{{ lookup('env', 'HTTP_PASSWORD') }}"
          scp_file: "{{ lookup('env', 'http_filename') }}"
      ignore_errors: true
      register: import_status

    - name: Wait for 15 seconds
      ansible.builtin.pause:
        seconds: 15

    - name: "Verifying Import SCP with invalid username of share access"
      ansible.builtin.assert:
        that:
          - idrac_import_server_config_profile_out.msg == "Failed to import scp."

    - name: "Importing SCP with invalid password of share access"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        target: ['IDRAC']
        share_parameters:
          share_name: "{{ lookup('env', 'HTTP_URL') }}"
          share_user: "{{ lookup('env', 'USERNAME') }}"
          share_password: "WrongPassword@123"
          scp_file: "{{ lookup('env', 'http_filename') }}"
      ignore_errors: true
      register: import_status

    - name: "Verifying Import SCP with invalid password of share access"
      ansible.builtin.assert:
        that:
          - idrac_import_server_config_profile_out.msg == "Failed to import scp."

    - name: "Importing SCP with share_name as None"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        target: ['IDRAC']
        share_parameters:
          share_name: ""
          share_user: "{{ lookup('env', 'USERNAME') }}"
          share_password: "WrongPassword@123"
          scp_file: "{{ lookup('env', 'http_filename') }}"
      ignore_errors: true
      register: import_status

    - name: "Verifying Import SCP with share_name as None"
      ansible.builtin.assert:
        that:
          - idrac_import_server_config_profile_out.msg == "Invalid file path provided."

    - name: "Importing SCP with proxy_ssupport enabled but no other proxy parameters"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        target: ['ALL']
        share_parameters:
          share_name: "{{ lookup('env', 'HTTP_URL') }}"
          share_user: "{{ lookup('env', 'HTTP_USERNAME') }}"
          share_password: "{{ lookup('env', 'HTTP_PASSWORD') }}"
          scp_file: "{{ lookup('env', 'http_filename') }}"
          proxy_support: true
      ignore_errors: true
      register: import_status

    - name: "Verifying Import SCP with proxy_ssupport enabled but no other proxy parameters"
      ansible.builtin.assert:
        that:
          - "'proxy_support is enabled but all of the following are missing' in '{{ idrac_import_server_config_profile_out.msg }}'"

    - name: "Importing SCP with invalid proxy parameters"
      ansible.builtin.import_role:
        name: "idrac_import_server_config_profile"
      vars:
        hostname: "{{ lookup('env', 'HOSTNAME') }}"
        username: "{{ lookup('env', 'USERNAME') }}"
        password: "{{ lookup('env', 'PASSWORD') }}"
        validate_certs: false
        target: ['ALL']
        share_parameters:
          share_name: "{{ lookup('env', 'HTTP_URL') }}"
          share_user: "{{ lookup('env', 'HTTP_USERNAME') }}"
          share_password: "{{ lookup('env', 'HTTP_PASSWORD') }}"
          scp_file: "{{ lookup('env', 'http_filename') }}"
          proxy_support: true
          proxy_type: http
          proxy_server: "randomProxyServer"
          proxy_port: "{{ lookup('env', 'PROXY_PORT') }}"
          proxy_password: "{{ lookup('env', 'PROXY_PASSWORD') }}"
      ignore_errors: true
      register: import_status

    - name: "Verifying Import SCP with invalid proxy parameter"
      ansible.builtin.assert:
        that:
          - idrac_import_server_config_profile_out.msg == "Failed to import scp."
