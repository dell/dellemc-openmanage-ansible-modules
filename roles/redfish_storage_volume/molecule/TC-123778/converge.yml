---
- name: Ansible - Role - redfish_storage_volume - [Check Mode] [Idempotency] Validate creating RAID0 with apply_time with default values
  hosts: all
  vars:
    failure: {}
    raid: "RAID0"
    minimum_required_drives: 1
  gather_facts: false

  tasks:
    - name: Fetching data from iDRAC for PERC
      ansible.builtin.include_tasks:
        file: ../__extract_storage.yml
      vars:
        search_in_name: 'PERC'

    - name: Setting PERC controller_id
      ansible.builtin.set_fact:
        perc_raid_controller_id: "{{ controller_id }}"
      when: controller_id != ""

    - name: Running for PERC Controller
      when: perc_raid_controller_id is defined
      block:
        - name: "Checking minimum number of drives for {{ raid }}"
          ansible.builtin.debug:
            msg: "Minimum number of required drives: {{ minimum_required_drives }}, current: {{ drive_list | length }}"
          when: drive_list | length < minimum_required_drives
          failed_when: true

        - name: "Create a {{ raid }} volume for PERC"
          ansible.builtin.import_role:
            name: dellemc.openmanage.redfish_storage_volume
          vars:
            hostname: "{{ lookup('env', 'IDRAC_IP') }}"
            username: "{{ lookup('env', 'IDRAC_USER') }}"
            password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
            validate_certs: false
            state: present
            raid_type: "{{ raid }}"
            volume_name: "VD_PERC"
            controller_id: "{{ perc_raid_controller_id }}"
            drives: "{{ drive_list[: minimum_required_drives] }}"
            job_wait: true

        - name: Asserting operation with check mode.
          ansible.builtin.assert:
            that: redfish_storage_volume_out.msg == "Changes found to be applied."
          when: ansible_check_mode

        - name: Asserting operation with normal mode.
          ansible.builtin.assert:
            that: redfish_storage_volume_out.msg == "Successfully submitted create volume task."
          when: not ansible_check_mode and redfish_storage_volume_out.changed

        - name: Asserting operation with idempotence.
          ansible.builtin.assert:
            that: redfish_storage_volume_out.msg == "No changes found to be applied."
          when: not ansible_check_mode and not redfish_storage_volume_out.changed

      rescue:
        - name: Set the failure messages for PERC
          ansible.builtin.set_fact:
            failure: "{{  failure | combine({'PERC': {'msg': ansible_failed_result.msg, 
                      'failed_task_name': ansible_failed_task.name}}) }}"

      always:
        - name: Deleting VD
          ansible.builtin.include_tasks:
            file: ../__delete_virtual_drive.yml
          when:
            - not ansible_check_mode
            - redfish_storage_volume_out is defined
            - not redfish_storage_volume_out.changed

    - name: Fetching data from iDRAC for BOSS
      ansible.builtin.include_tasks:
        file: ../__extract_storage.yml
      vars:
        search_in_name: 'BOSS'

    - name: Setting BOSS controller_id
      ansible.builtin.set_fact:
        boss_raid_controller_id: "{{ controller_id }}"
      when: controller_id != ""

    - name: Running for BOSS Controller
      when: boss_raid_controller_id is defined
      block:
        - name: "Checking minimum number of drives for {{ raid }}"
          ansible.builtin.debug:
            msg: "Minimum number of required drives: {{ minimum_required_drives }}, current: {{ drive_list | length }}"
          when: drive_list | length < minimum_required_drives
          failed_when: true

        - name: "Create a {{ raid }} volume for BOSS"
          ansible.builtin.import_role:
            name: dellemc.openmanage.redfish_storage_volume
          vars:
            hostname: "{{ lookup('env', 'IDRAC_IP') }}"
            username: "{{ lookup('env', 'IDRAC_USER') }}"
            password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
            validate_certs: false
            state: present
            raid_type: "{{ raid }}"
            name: "VD_BOSS"
            controller_id: "{{ boss_raid_controller_id }}"
            drives: "{{ drive_list[: minimum_required_drives] }}"
            job_wait: false

        - name: Waiting for Job completion
          ansible.builtin.include_tasks:
            file: ../__job_tracking.yml

        - name: Asserting operation with check mode.
          ansible.builtin.assert:
            that: redfish_storage_volume_out.msg == "Changes found to be applied."
          when: ansible_check_mode

        - name: Asserting operation with normal mode.
          ansible.builtin.assert:
            that: redfish_storage_volume_out.msg == "Successfully submitted create volume task."
          when: not ansible_check_mode and redfish_storage_volume_out.changed

        - name: Asserting operation with idempotence.
          ansible.builtin.assert:
            that: redfish_storage_volume_out.msg == "No changes found to be applied."
          when: not ansible_check_mode and not redfish_storage_volume_out.changed

      rescue:
        - name: Set the failure messages for BOSS
          ansible.builtin.set_fact:
            failure: "{{  failure | combine({'BOSS': {'msg': ansible_failed_result.msg, 
                      'failed_task_name': ansible_failed_task.name}}) }}"

      always:
        - name: Deleting VD
          ansible.builtin.include_tasks:
            file: ../__delete_virtual_drive.yml
          when:
            - not ansible_check_mode
            - redfish_storage_volume_out is defined
            - not redfish_storage_volume_out.changed

        - name: Waiting for Job completion
          ansible.builtin.include_tasks:
            file: ../__job_tracking.yml

    - name: Collecting failure
      ansible.builtin.debug:
        var: failure
      when: failure
      failed_when: true

    - name: Executing if both PERC and BOSS is not found.
      ansible.builtin.debug:
        msg: "iDRAC doesn't have PERC and BOSS raid controller."
      when: perc_raid_controller_id is undefined and boss_raid_controller_id is undefined
      failed_when: true
