---
- name: TC-124007 - Ansible - Role- redfish_storage_volume - [Check Mode] [Idempotency] Validate creating RAID6 VD
  hosts: all
  vars:
    redfish_storage_volume_failure: {}
    redfish_storage_volume_raid: "RAID6"
    redfish_storage_volume_minimum_drives: 4
  gather_facts: false

  tasks:
    - name: Fetching data from iDRAC for PERC
      ansible.builtin.include_tasks:
        file: ../__extract_storage.yml
      vars:
        redfish_storage_volume_search_in_name: 'PERC'

    - name: Setting PERC controller_id
      ansible.builtin.set_fact:
        redfish_storage_volume_perc_raid_controller_id: "{{ redfish_storage_volume_controller_id }}"
      when: redfish_storage_volume_controller_id != ""

    - name: Running for PERC Controller
      when: redfish_storage_volume_perc_raid_controller_id is defined
      block:
        - name: "Checking minimum number of drives for {{ redfish_storage_volume_raid }}"
          ansible.builtin.debug:
            msg: "Minimum number of required drives: {{ redfish_storage_volume_minimum_drives }}, current: {{ redfish_storage_volume_drive_list | length }}"
          when: redfish_storage_volume_drive_list | length < redfish_storage_volume_minimum_drives
          failed_when: true

        - name: "Create a volume for PERC, raid_type {{ redfish_storage_volume_raid }}"
          ansible.builtin.import_role:
            name: dellemc.openmanage.redfish_storage_volume
          vars:
            hostname: "{{ lookup('env', 'IDRAC_IP') }}"
            username: "{{ lookup('env', 'IDRAC_USER') }}"
            password: "{{ lookup('env', 'IDRAC_PASSWORD') }}"
            validate_certs: false
            state: present
            raid_type: "{{ redfish_storage_volume_raid }}"
            volume_name: "VD_PERC"
            controller_id: "{{ redfish_storage_volume_perc_raid_controller_id }}"
            drives: "{{ redfish_storage_volume_drive_list[:redfish_storage_volume_minimum_drives] }}"
            job_wait: true

        - name: Asserting operation with check mode.
          ansible.builtin.assert:
            that: redfish_storage_volume_out.msg == "Changes found to be applied."
          when: ansible_check_mode

        - name: Asserting operation with normal mode.
          ansible.builtin.assert:
            that: redfish_storage_volume_out.msg == "The job is successfully completed."
          when: not ansible_check_mode and redfish_storage_volume_out.changed

        - name: Asserting operation with idempotence.
          ansible.builtin.assert:
            that: redfish_storage_volume_out.msg == "No changes found to be applied."
          when: not ansible_check_mode and not redfish_storage_volume_out.changed

      rescue:
        - name: Set the failure messages for PERC
          ansible.builtin.set_fact:
            redfish_storage_volume_failure: "{{  redfish_storage_volume_failure | combine({'PERC': {'msg': ansible_failed_result.msg,
                      'failed_task_name': ansible_failed_task.name}}) }}"

      always:
        - name: Deleting VD
          ansible.builtin.include_tasks:
            file: ../__delete_virtual_drive.yml
          when:
            - not ansible_check_mode
            - redfish_storage_volume_out is defined
            - not redfish_storage_volume_out.changed

    - name: Collecting failure
      ansible.builtin.debug:
        var: redfish_storage_volume_failure
      when: redfish_storage_volume_failure
      failed_when: true
