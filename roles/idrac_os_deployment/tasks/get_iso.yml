- name: Check if kickstart readable
  delegate_to: "{{ idrac_osd_host }}"
  ansible.builtin.stat:
    path: "{{ kickstart_file }}"
  register: ks_read

- name: Kickstart read error
  ansible.builtin.fail:
    msg: "Kickstart file does not exist or is not readable {{ kickstart_file }}"
  when: not ks_read.stat.exists

- name: Set download command
  ansible.builtin.set_fact:
    idrac_osd_wget_cmd:
      "wget {{ source_iso.path }} --directory-prefix={{ working_dir.path }}
      --no-check-certificate{% if source_iso.username is defined and source_iso.username %}
      --user={{ source_iso.username }} --password={{ source_iso.password }}{%endif %}"
  when: iso_share_type in ['HTTP', 'HTTPS']
  no_log: true

- name: Download iso from http, https
  become: true
  delegate_to: "{{ idrac_osd_host }}"
  ansible.builtin.command: "{{ idrac_osd_wget_cmd }}"
  register: wget_iso_cmd
  when: iso_share_type in ['HTTP', 'HTTPS']
  changed_when: wget_iso_cmd.rc == 0
  failed_when: false
  no_log: true

- name: Download iso failed
  ansible.builtin.fail:
    msg: "Download of ISO from {{ source_iso.path }} failed. Please check the source URI or credentials."
  when:
    - iso_share_type in ['HTTP', 'HTTPS']
    - wget_iso_cmd.failed or wget_iso_cmd.rc != 0

- name: Set local path of source iso
  ansible.builtin.set_fact:
    src_iso: "{{ working_dir.path }}/{{ source_iso.path | basename }}"
    downloaded_iso: true
  when: iso_share_type in ['HTTP', 'HTTPS']

- name: Mounting NFS volume to localhost
  become: true
  delegate_to: "{{ idrac_osd_host }}"
  ansible.posix.mount:
    src: "{{ source_iso.path | dirname }}"
    path: "{{ idrac_osd_mount_path }}/source_iso_mount"
    state: mounted
    fstype: nfs
  register: nfs_mount_path
  when: iso_share_type == 'NFS'
  ignore_errors: true

- name: NFS path mounting failed
  ansible.builtin.fail:
    msg: "Mounting source NFS share failed."
  when: iso_share_type == 'NFS' and nfs_mount_path.failed

- name: Mounting CIFS volume to localhost
  become: true
  delegate_to: "{{ idrac_osd_host }}"
  ansible.posix.mount:
    src: "{{ source_iso.path | dirname }}"
    path: "{{ idrac_osd_mount_path }}/source_iso_mount"
    state: mounted
    opts: "rw,username={{ source_iso.username | split('@') | first }},password={{ source_iso.password }}"
    fstype: cifs
  register: cifs_mount_path
  when: iso_share_type == 'CIFS'
  no_log: true
  ignore_errors: true

- name: CIFS path mounting failed
  ansible.builtin.fail:
    msg: "Mounting source CIFS share failed. Please check the path or credentials"
  when: iso_share_type == 'CIFS' and cifs_mount_path.failed

- name: Set local path of source iso NFS
  ansible.builtin.set_fact:
    src_iso: "{{ nfs_mount_path.name }}/{{ source_iso.path | basename }}"
  when: iso_share_type == 'NFS'

- name: Set local path of source iso CIFS
  ansible.builtin.set_fact:
    src_iso: "{{ cifs_mount_path.name }}/{{ source_iso.path | basename }}"
  when: iso_share_type == 'CIFS'

- name: Get temp dir
  ansible.builtin.set_fact:
    work_path: "{{ working_dir.path }}"

- name: Set local path of source iso
  ansible.builtin.set_fact:
    src_iso: "{{ source_iso.path }}"
  when: iso_share_type == 'Local'

- name: Get iso name
  ansible.builtin.set_fact:
    iso_basename: "{{ src_iso | splitext | list | first | basename }}"

- name: Check if iso readable
  delegate_to: "{{ idrac_osd_host }}"
  ansible.builtin.stat:
    path: "{{ src_iso }}"
  register: source_iso_mount

- name: Source iso read error
  ansible.builtin.fail:
    msg: "Source iso does not exist or is not mounted properly at path {{ src_iso }}"
  when: not source_iso_mount.stat.exists

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "{{ working_dir.path }}/{{ iso_basename }}"
    state: directory
    mode: "0755"
  register: iso_extract_dir
  delegate_to: "{{ idrac_osd_host }}"

- name: Extract iso
  delegate_to: "{{ idrac_osd_host }}"
  ansible.builtin.command: "xorriso -osirrox on -indev {{ src_iso }} -extract / {{ iso_extract_dir.path }}"
  register: extract_cmd_out
  when: source_iso_mount.stat.exists
  changed_when: extract_cmd_out.rc == 0
  failed_when: extract_cmd_out.rc != 0

- name: Set extracted dir
  ansible.builtin.set_fact:
    iso_dir: "{{ iso_extract_dir.path }}"
