- name: Copy KS to extracted
  become: true
  ansible.builtin.copy:
    src: "{{ kickstart_file }}"
    dest: "{{ iso_dir }}/{{ rhel_ks_filename }}"
    mode: "0755"
  delegate_to: "{{ idrac_osd_host }}"

- name: Set KickStart location
  ansible.builtin.set_fact:
    ks_location: "{{ rhel_ks_dest_prefix }}{{ rhel_ks_filename }}"

- name: Append ks path to the linux boot menu
  delegate_to: "{{ idrac_osd_host }}"
  become: true
  ansible.builtin.lineinfile:
    path: "{{ item }}"
    regexp: "^(.*inst.stage2=hd:LABEL.*?)( inst.ks={{ ks_location }})?$"
    backrefs: true
    firstmatch: true
    line: '\1 inst.ks={{ ks_location }}'
  with_items:
    - "{{ iso_dir }}/isolinux/isolinux.cfg"
    - "{{ iso_dir }}/EFI/BOOT/grub.cfg"

- name: Menu default remove all occurrences
  delegate_to: "{{ idrac_osd_host }}"
  become: true
  ansible.builtin.lineinfile:
    path: "{{ iso_dir }}/isolinux/isolinux.cfg"
    search_string: "menu default"
    state: absent

- name: Menu default insert before kernel vmlinuz isolinux
  delegate_to: "{{ idrac_osd_host }}"
  become: true
  ansible.builtin.lineinfile:
    path: "{{ iso_dir }}/isolinux/isolinux.cfg"
    line: "  menu default"
    firstmatch: true
    insertbefore: ".*kernel vmlinuz.*"

- name: Grub menu default 0
  delegate_to: "{{ idrac_osd_host }}"
  become: true
  ansible.builtin.lineinfile:
    path: "{{ iso_dir }}/EFI/BOOT/grub.cfg"
    line: 'set default="0"'
    firstmatch: true
    regexp: "^set default="

- name: Get iso LABEL
  delegate_to: "{{ idrac_osd_host }}"
  ansible.builtin.command: "blkid -s LABEL -o value {{ src_iso }}"
  register: blkid_output
  changed_when: blkid_output.rc != 0

- name: Set iso LABEL
  ansible.builtin.set_fact:
    iso_label: "{{ blkid_output.stdout | trim }}"

- name: Remove source iso if downloaded
  become: true
  delegate_to: "{{ idrac_osd_host }}"
  ansible.builtin.file:
    path: "{{ src_iso }}"
    state: absent
  when: downloaded_iso
  failed_when: false

- name: Compile custom ISO
  become: true
  ansible.builtin.command:
    chdir: "{{ iso_extract_dir.path }}"
    cmd:
      "mkisofs -o {{ custom_iso }} -b isolinux/isolinux.bin -J -R -l -c isolinux/boot.cat
      -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img
      -no-emul-boot -graft-points -joliet-long -V {{ iso_label }} ."
  register: mkisofs_output
  changed_when: mkisofs_output.rc == 0
  failed_when: mkisofs_output.rc != 0
  no_log: "{{ idrac_osd_std_log }}"

- name: Post-process ISO image with isohybrid
  become: true
  delegate_to: "{{ idrac_osd_host }}"
  ansible.builtin.command: isohybrid --uefi {{ custom_iso }}
  register: isohybrid_output
  changed_when: isohybrid_output.rc == 0
  ignore_errors: true

- name: Add correct checksum to iso
  become: true
  delegate_to: "{{ idrac_osd_host }}"
  ansible.builtin.command: implantisomd5 {{ custom_iso }}
  register: checksum_output
  changed_when: checksum_output.rc == 0
  ignore_errors: true
