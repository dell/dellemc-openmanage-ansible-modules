---
- name: Testing boot_order_using_legacy_mode_force_restart
  hosts: all
  gather_facts: false
  vars:
    hostname: "{{ lookup('ansible.builtin.env', 'IDRAC_IP') }}"
    username: "{{ lookup('ansible.builtin.env', 'IDRAC_USER') }}"
    password: "{{ lookup('ansible.builtin.env', 'IDRAC_PASSWORD') }}"
    validate_certs: false
    boot_order_uri: "https://{{ hostname }}:{{ https_port }}/redfish/v1/Systems/System.Embedded.1/"
    lc_uri: "https://{{ hostname }}:{{ https_port }}/redfish/v1/Dell/Managers/iDRAC.Embedded.1/DellLCService/Actions/DellLCService.GetRemoteServicesAPIStatus"
    retry_count: 60
    delay_count: 30
  tasks:
    - name: Preparing set_fact for uri
      ansible.builtin.set_fact:
        uri_input: &uri_input
          user: "{{ username }}"
          password: "{{ password }}"
          validate_certs: "{{ validate_certs }}"
          ca_path: "{{ ca_path | default(omit) }}"
          headers:
            Accept: "application/json"
            Content-Type: "application/json"
            OData-Version: "4.0"
          body_format: "json"
          return_content: true
          force_basic_auth: true
          timeout: "{{ https_timeout }}"
      no_log: true

    - name: Fetching boot order from iDRAC
      ansible.builtin.uri:
        <<: *uri_input
        url: "{{ boot_order_uri }}"
        method: GET
      register: result_data
      check_mode: false
      no_log: true

    - name: Extracing BootOrder from output
      ansible.builtin.set_fact:
        data: "{{ result_data.json.Boot.BootOrder | default([]) }}"

    - name: Reversing the boot order
      ansible.builtin.set_fact:
        reverse_boot_order: "{{ data | reverse | list }}"

    - name: Checking for LCStatus before running pre-requisite
      ansible.builtin.uri:
        <<: *uri_input
        url: "{{ lc_uri }}"
        method: POST
        body: {}
      register: lc_status_result
      check_mode: false
      until: lc_status_result.json.LCStatus == "Ready"
      retries: "{{ retry_count }}"
      delay: "{{ delay_count }}"
      no_log: true

    - name: Pre-requisite - Making sure boot mode is legacy
      check_mode: false
      ansible.builtin.import_role:
        name: "idrac_boot"
      vars:
        boot_source_override_mode: legacy
      tags: molecule-idempotence-notest

    - name: Checking for LCStatus after running pre-requisite
      ansible.builtin.uri:
        <<: *uri_input
        url: "{{ lc_uri }}"
        method: POST
        body: {}
      register: lc_status_result
      check_mode: false
      when: idrac_boot_out.changed # noqa: no-handler
      until: lc_status_result.json.LCStatus == "Ready"
      retries: "{{ retry_count }}"
      delay: "{{ delay_count }}"
      no_log: true

    - name: TC-115427 - Validate boot_order with legacy mode with force_restart
      ansible.builtin.include_role:
        name: "idrac_boot"
      vars:
        boot_order: "{{ reverse_boot_order }}"
        reset_type: force_restart

    - name: Checking for LCStatus after performing operation
      ansible.builtin.uri:
        <<: *uri_input
        url: "{{ lc_uri }}"
        method: POST
        body: {}
      register: lc_status_result
      check_mode: false
      when: idrac_boot_out.changed # noqa: no-handler
      until: lc_status_result.json.LCStatus == "Ready"
      retries: "{{ retry_count }}"
      delay: "{{ delay_count }}"
      no_log: true

    - name: Asserting TC-115427 in check mode
      ansible.builtin.assert:
        that: idrac_boot_out.msg == "Changes found to be applied."
      when: ansible_check_mode
      tags: molecule-idempotence-notest

    - name: Asserting TC-115427 in normal mode
      ansible.builtin.assert:
        that: idrac_boot_out.msg == "Successfully updated the boot settings."
      when: not ansible_check_mode and idrac_boot_out.changed

    - name: Asserting TC-115427 in idempotence mode
      ansible.builtin.assert:
        that:
          - idrac_boot_out.msg == "No changes found to be applied."
      when: not ansible_check_mode and not idrac_boot_out.changed
